<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端面试——节流和防抖</title>
      <link href="/post/ba6dbf4c.html"/>
      <url>/post/ba6dbf4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、防抖"><a href="#一、防抖" class="headerlink" title="一、防抖"></a>一、防抖</h1><p>防止抖动，避免重复触发</p><p>等用户高频事件完，再进行时间操作</p><h2 id="1-设计思路"><a href="#1-设计思路" class="headerlink" title="1. 设计思路"></a>1. 设计思路</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/35110017/1684371074995-a93ab47a-28c4-4c73-933a-aacd5d0e4b53.jpeg" alt="img"></p><p>思路：事件触发后，开启一个定时器，如果事件在这个定时器限时时间内再次出发，则清除定时器，重新写一个定时器，定时时间到，触发操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> timer=<span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">clearTimeOut</span>()</span><br><span class="line">    timer=<span class="title function_">setTimeOut</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、节流"><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h1><p>将频繁的操作减少，并每隔一段时间执行一次，即控制实践触发的频率</p><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/35110017/1684374691378-ede0c6a3-03dc-43a2-b562-0b3329912d3a.jpeg" alt="img"></p><p>思路：设计一个阀门，事件触发后，阀门关闭，定时开启，阀门开启时，才可继续触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="title function_">setTimeOut</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> throttleFunc = <span class="title function_">throttle</span>(fn, <span class="number">2000</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">throrrleFunc</span>(<span class="title class_">Math</span>.<span class="title function_">radom</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><ol><li><p>防抖：</p></li><li><ol><li>search 搜索联想</li><li>window 触发 resize 的时候，不断调整浏览器窗口大小会不断触发这个函数，用防抖来让其只触发一次</li></ol></li><li><p>节流</p></li><li><ol><li>鼠标不断点击触发，只有单位时间内触发一次</li><li>坚挺滚动事件，比如是否滑倒底部会自动加载更多</li></ol></li></ol><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><ol><li><p>相同点</p></li><li><ol><li>为了阻止高频触发，从而浪费性能</li></ol></li><li><p>不同点</p></li><li><ol><li>防抖是，拼命点，只触发一次</li><li>节流是单位时间内只生效一次</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post title with whitespace</title>
      <link href="/post/3ff938bd.html"/>
      <url>/post/3ff938bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符串逆序输出"><a href="#1-字符串逆序输出" class="headerlink" title="1. 字符串逆序输出"></a>1. 字符串逆序输出</h2><h3 id="方法一：先转化成数组，再逆序，再拼接回-String"><a href="#方法一：先转化成数组，再逆序，再拼接回-String" class="headerlink" title="方法一：先转化成数组，再逆序，再拼接回 String"></a>方法一：先转化成数组，再逆序，再拼接回 String</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组 reverse()</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：for-循环-chartAt-，倒序，逐个拼接"><a href="#方法二：for-循环-chartAt-，倒序，逐个拼接" class="headerlink" title="方法二：for 循环+chartAt()，倒序，逐个拼接"></a>方法二：for 循环+chartAt()，倒序，逐个拼接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> n= str.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=n;i&gt;=<span class="number">0</span>;i--;)&#123;</span><br><span class="line">   <span class="keyword">return</span> result+=str.<span class="title function_">charAt</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三：类同方法二，递归-charAt"><a href="#方法三：类同方法二，递归-charAt" class="headerlink" title="方法三：类同方法二，递归+charAt()"></a>方法三：类同方法二，递归+charAt()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString3</span>(<span class="params">str, pos, strOut</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) <span class="keyword">return</span> strOut</span><br><span class="line">  strOut += strIn.<span class="title function_">charAt</span>(pos--)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">reverseString3</span>(strIn, pos, strOut)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四：调用-call-函数后，让字符串具有数组的特性，在调用未传入参数的-slice-函数后，调用-reverse-，再调用-join-函数，得到逆序字符串"><a href="#方法四：调用-call-函数后，让字符串具有数组的特性，在调用未传入参数的-slice-函数后，调用-reverse-，再调用-join-函数，得到逆序字符串" class="headerlink" title="方法四：调用 call()函数后，让字符串具有数组的特性，在调用未传入参数的 slice()函数后，调用 reverse()，再调用 join()函数，得到逆序字符串"></a>方法四：调用 call()函数后，让字符串具有数组的特性，在调用未传入参数的 slice()函数后，调用 reverse()，再调用 join()函数，得到逆序字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="property">prototypr</span>.<span class="property">slice</span>.<span class="title function_">call</span>(str)</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法五：借助栈的先进后出原则"><a href="#方法五：借助栈的先进后出原则" class="headerlink" title="方法五：借助栈的先进后出原则"></a>方法五：借助栈的先进后出原则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stack</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>=[];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">top</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">stack.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span><br><span class="line">  <span class="attr">push</span>:<span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">elemnet</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">top</span>++]=elemnt</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">pop</span>:<span class="keyword">function</span> <span class="title function_">pop</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[--<span class="variable language_">this</span>.<span class="property">top</span>]</span><br><span class="line">&#125;</span><br><span class="line">  <span class="attr">length</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">top</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString5</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title function_">stack</span>()</span><br><span class="line">  <span class="keyword">var</span> arr=str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> len=arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">var</span> result=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lenth;i++)&#123;</span><br><span class="line">    s.<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;lenth;j++)&#123;</span><br><span class="line">    reslut+=s.<span class="title function_">pop</span>(j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-统计字符串出现次数最多的字符及出现的次数"><a href="#2-统计字符串出现次数最多的字符及出现的次数" class="headerlink" title="2.统计字符串出现次数最多的字符及出现的次数"></a>2.统计字符串出现次数最多的字符及出现的次数</h2><h3 id="方法一：遍历字符串，通过-key-value-的对象来存储数据，遍历对象，判断条件，统计出现次数"><a href="#方法一：遍历字符串，通过-key-value-的对象来存储数据，遍历对象，判断条件，统计出现次数" class="headerlink" title="方法一：遍历字符串，通过 key-value 的对象来存储数据，遍历对象，判断条件，统计出现次数"></a>方法一：遍历字符串，通过 key-value 的对象来存储数据，遍历对象，判断条件，统计出现次数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxCount</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> json=&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!json[str.<span class="title function_">charAt</span>(i)])&#123;</span><br><span class="line">      json[str.<span class="title function_">charAt</span>(i)]=<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      json[str.<span class="title function_">charAt</span>(i)]++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> maxCountChar=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> maxcount=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> json)&#123;</span><br><span class="line">    <span class="keyword">if</span>(json[key]&gt;maxCount)&#123;</span><br><span class="line">      maxCount=json[key]</span><br><span class="line">      maxCountChar=kley</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  retrun <span class="string">&#x27;出现最多的值是&#x27;</span>+maxCountChar+<span class="string">&#x27;出现次数为&#x27;</span>+maxCount</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;gfdshghsdghsodhgiodskgdlsnvjnkpjgpfdjsgjdso&#x27;</span></span><br><span class="line"><span class="title function_">getMaxCount</span>(str)</span><br></pre></td></tr></table></figure><h3 id="方法二：将字符串转换成数组，通过切割数组计算长度来统计次数"><a href="#方法二：将字符串转换成数组，通过切割数组计算长度来统计次数" class="headerlink" title="方法二：将字符串转换成数组，通过切割数组计算长度来统计次数"></a>方法二：将字符串转换成数组，通过切割数组计算长度来统计次数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxCount2</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> json = &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> maxCount = <span class="number">0</span>,</span><br><span class="line">    maxCountChar = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断json对象中是否有对应的key</span></span><br><span class="line">    <span class="keyword">if</span> (!json.<span class="title function_">hasOwnProperty</span>(item)) &#123;</span><br><span class="line">      <span class="comment">// 当前字符出现的次数</span></span><br><span class="line">      <span class="keyword">var</span> number = str.<span class="title function_">split</span>(item).<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="comment">// 直接与出现次数最大值比较，并进行更新</span></span><br><span class="line">      <span class="keyword">if</span> (number &gt; maxCount) &#123;</span><br><span class="line">        <span class="comment">// 写入json对象</span></span><br><span class="line">        json[item] = number</span><br><span class="line">        <span class="comment">// 更新maxCount与maxCountChar的值</span></span><br><span class="line">        maxCount = number</span><br><span class="line">        maxCountChar = item</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;出现最多的值是&#x27;</span> + maxCountChar + <span class="string">&#x27;，出现次数为&#x27;</span> + maxCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;helloJavaScripthellohtmlhellocss&#x27;</span></span><br><span class="line"><span class="title function_">getMaxCount2</span>(str) <span class="comment">// &#x27;出现最多的值是l，出现次数为7&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="方法三：正则将字符串处理成数组，然后统计"><a href="#方法三：正则将字符串处理成数组，然后统计" class="headerlink" title="方法三：正则将字符串处理成数组，然后统计"></a>方法三：正则将字符串处理成数组，然后统计</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxCount4</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 定义两个变量，分别表示出现最大次数和对应的字符</span></span><br><span class="line">  <span class="keyword">var</span> maxCount = <span class="number">0</span>,</span><br><span class="line">    maxCountChar = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// 先处理成数组，调用sort()函数排序,再处理成字符串</span></span><br><span class="line">  str = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">// 通过正则表达式将字符串处理成数组(数组每个元素为相同字符构成的字符串)</span></span><br><span class="line">  <span class="keyword">var</span> arr = str.<span class="title function_">match</span>(<span class="regexp">/(\w)\1+/g</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// length表示字符串出现的次数</span></span><br><span class="line">    <span class="keyword">var</span> length = arr[i].<span class="property">length</span></span><br><span class="line">    <span class="comment">// 与次数最大值作比较</span></span><br><span class="line">    <span class="keyword">if</span> (length &gt; maxCount) &#123;</span><br><span class="line">      <span class="comment">// 更新maxCount和maxCountChar</span></span><br><span class="line">      maxCount = length</span><br><span class="line">      maxCountChar = arr[i][<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;出现最多的值是&#x27;</span> + maxCountChar + <span class="string">&#x27;，出现次数为&#x27;</span> + maxCount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;helloJavaScripthellohtmlhellocss&#x27;</span></span><br><span class="line"><span class="title function_">getMaxCount4</span>(str) <span class="comment">// &#x27;出现最多的值是l，出现次数为7&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-删除字符串中的重复元素"><a href="#3-删除字符串中的重复元素" class="headerlink" title="3.删除字符串中的重复元素"></a>3.删除字符串中的重复元素</h2><h3 id="方法一：用-key-value-的形式，对元素进行统计，首次出现的元素-push-进新数组中，最后转换成字符串"><a href="#方法一：用-key-value-的形式，对元素进行统计，首次出现的元素-push-进新数组中，最后转换成字符串" class="headerlink" title="方法一：用 key-value 的形式，对元素进行统计，首次出现的元素 push 进新数组中，最后转换成字符串"></a>方法一：用 key-value 的形式，对元素进行统计，首次出现的元素 push 进新数组中，最后转换成字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicateChar1</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 结果数组</span></span><br><span class="line">  <span class="keyword">var</span> result = []</span><br><span class="line">  <span class="comment">// key-value形式的对象</span></span><br><span class="line">  <span class="keyword">var</span> json = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 当前处理的字符</span></span><br><span class="line">    <span class="keyword">var</span> char = str[i]</span><br><span class="line">    <span class="comment">// 判断是否在对象中</span></span><br><span class="line">    <span class="keyword">if</span> (!json[char]) &#123;</span><br><span class="line">      <span class="comment">// value值设置为false</span></span><br><span class="line">      json[char] = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 添加至结果数组中</span></span><br><span class="line">      result.<span class="title function_">push</span>(char)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;helloJavaScripthellohtmlhellocss&#x27;</span></span><br><span class="line"><span class="title function_">removeDuplicateChar1</span>(str) <span class="comment">// &#x27;heloJavscriptm&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-判断一个字字符串是否为回文字符"><a href="#4-判断一个字字符串是否为回文字符" class="headerlink" title="4.判断一个字字符串是否为回文字符"></a>4.判断一个字字符串是否为回文字符</h2><h3 id="方法一：双指针-首位和末位一一对比，true-则像中间收缩，继续对比"><a href="#方法一：双指针-首位和末位一一对比，true-则像中间收缩，继续对比" class="headerlink" title="方法一：双指针 首位和末位一一对比，true 则像中间收缩，继续对比"></a>方法一：双指针 首位和末位一一对比，true 则像中间收缩，继续对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPalindromicStr1</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 空字符则直接返回“true”</span></span><br><span class="line">  <span class="keyword">if</span> (!str.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 统一转换成小写，同时转换成数组</span></span><br><span class="line">  str = str.<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span>,</span><br><span class="line">    end = str.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">// 通过while循环判断正序和倒序的字母</span></span><br><span class="line">  <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">    <span class="comment">// 如果相等则更改比较的索引</span></span><br><span class="line">    <span class="keyword">if</span> (str[start] === str[end]) &#123;</span><br><span class="line">      start++</span><br><span class="line">      end--</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abcdcba&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abcedba&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">isPalindromicStr1</span>(str1) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isPalindromicStr1</span>(str2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="方法二：直接将字符串逆序处理，然后与原字符串进行比较，如相等就是回文字符串"><a href="#方法二：直接将字符串逆序处理，然后与原字符串进行比较，如相等就是回文字符串" class="headerlink" title="方法二：直接将字符串逆序处理，然后与原字符串进行比较，如相等就是回文字符串"></a>方法二：直接将字符串逆序处理，然后与原字符串进行比较，如相等就是回文字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法3</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPalindromicStr3</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 字符串统一转换成小写</span></span><br><span class="line">  str = str.<span class="title function_">toLowerCase</span>()</span><br><span class="line">  <span class="comment">// 将字符串转换成数组</span></span><br><span class="line">  <span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">// 将数组逆序并转换成字符串</span></span><br><span class="line">  <span class="keyword">var</span> reverseStr = arr.<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> str === reverseStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abcdcba&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abcedba&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">isPalindromicStr3</span>(str1) <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isPalindromicStr3</span>(str2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
